<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    在MyBatis中，Mapper中的namespace用于绑定Dao接口的，即面向接口编程。
    它的好处在于当使用了namespace之后就可以不用写接口实现类，业务逻辑会直接通过这个绑定寻找到相对应的SQL语句进行对应的数据处理，例如：
    Employeer employeer = (Employeer) session.selectOIEmployeerMapperpper.findEmployeerByID", id);
	Employeer employeer = session.getMapcom.whz.mapperinterface.IEmployeerMapperpper.class).findEmployeerByID(id);
    -->
<mapper namespace="com.whz.mapperinterface.IEmployeerMapper">

    <sql id="selectAllEmployeer">select * from `t_employeer`</sql>

    <!-- 解析的时候会把 select、insert、delete和update都封装成一个 MappedStatement 对象，然后以id作为key，保存到 Configuration 对象的 mappedStatements 属性中-->
    <select id="findAllEmployeer" resultType="alias_Employeer">
        <include refid="selectAllEmployeer"/>
    </select>

    <select id="findAllEmployeerByPage" resultType="alias_Employeer">
        SELECT * FROM `t_employeer`
        <if test="orderByField != null">
            ORDER BY ${orderByField} ASC, employeer_id DESC
        </if>
        <if test="index != null and index gt -1 and pageSize != null and pageSize gt 0">
            limit #{index}, #{pageSize}
        </if>
    </select>


    <!--
        id：在命名空间中唯一的标识符，可以被用来引用这条语句，同时这个id也绑定了接口的中的方法名称。
        parameterType：将会传入这条语句的参数类的完全限定名或别名（绑定接口方法的入参），如果有多个入参可以使用@Param注解的方式，如：findEmployeerByDepartmentAndWorktype
     -->
    <select id="findEmployeerByID" parameterType="int" resultType="alias_Employeer">
        select * from `t_employeer`
        where employeer_id = #{id}
    </select>

    <!--使用@Param注解的形式-->
    <select id="findEmployeerByDepartmentAndWorktype" resultType="alias_Employeer">
        select * from `t_employeer`
        where employeer_department = #{department} and employeer_worktype = #{worktype}
    </select>


    <sql id="whereCondition">
        <trim suffixOverrides="and">
            <where>
                <if test="name!=null"> employeer_name = #{name} and </if>
                <if test="age!=null"> employeer_age = #{age} and </if>
                <if test="department!=null"> employeer_department = #{department} and </if>
                <if test="worktype!=null"> employeer_worktype = #{worktype} </if>
            </where>
        </trim>
    </sql>
    <select id="findEmployeerByCondition1" parameterType="map" resultType="map">
        select * from `t_employeer`
        <include refid="whereCondition"/>
    </select>
    <select id="findEmployeerByCondition2" parameterType="map" resultType="alias_Employeer">
        select * from `t_employeer`
        <include refid="whereCondition"/>
    </select>
    <!--使用这种方法时，<if test="xxx"/>里的xxx必须对应持久化对象的字段名称（而不是setXxx方法）-->
    <select id="findEmployeerByCondition3" parameterType="alias_Employeer" resultType="alias_Employeer">
        select * from `t_employeer`
        <trim suffixOverrides="and">
            <where>
                <if test="employeer_name!=null"> employeer_name = #{employeer_name} and </if>
                <if test="employeer_name!=null"> employeer_age = #{age} and </if>
                <if test="employeer_name!=null"> employeer_department = #{employeer_name} and </if>
                <if test="employeer_name!=null"> employeer_worktype = #{employeer_name} </if>
            </where>
        </trim>
    </select>

    <select id="findEmployeerByCondition4" resultType="alias_Employeer">
        select * from `t_employeer`
        <trim suffixOverrides="and">
            <where>
                <if test="employeer_name!=null"> employeer_name = #{employeer_name} and </if>
                <if test="employeer_name!=null"> employeer_age = #{age} and </if>
                <if test="employeer_name!=null"> employeer_department = #{employeer_name} and </if>
                <if test="employeer_name!=null"> employeer_worktype = #{employeer_name} </if>
            </where>
            limit #{index}, #{pageSize}
        </trim>
    </select>

    <!-- 插入 -->
    <!-- useGeneratedKeys设置为"true"表明要MyBatis获取由数据库自动生成的主键；keyProperty="id"指定把获取到的主键值注入到Employeer的id属性 -->
    <insert id="addEmployeer" parameterType="alias_Employeer">
        <selectKey resultType="int" order="AFTER" keyProperty="employeer_id">
            SELECT LAST_INSERT_ID() AS employeer_id
        </selectKey>
        insert into `t_employeer`(employeer_name,employeer_age,employeer_department,employeer_worktype)
        values(#{employeer_name},#{employeer_age},#{employeer_department},#{employeer_worktype})
    </insert>

    <!-- 删除  -->
    <delete id="deleteEmployeer" parameterType="int">
        delete from `t_employeer`
        where employeer_id = #{employeer_id}
    </delete>

    <!-- 修改：注意这里用的 #{employeer_id} 必须是 Employeer 类的属性名，而不是根据setXxx()方法来解析的-->
    <update id="updateEmployeer" parameterType="alias_Employeer">
        update t_employeer
        set employeer_name = #{employeer_name}
          ,employeer_age= #{employeer_age}
          ,employeer_department = #{employeer_department}
          ,employeer_worktype = #{employeer_worktype}
        where employeer_id = #{employeer_id}
    </update>
















<!--    <parameterMap id="" type=""></parameterMap>
    <sql></sql>
    <resultMap></resultMap>
    <cache></cache>
    <cache-ref></cache-ref>-->

<!--    <select
            id="select1"
            parameterType="int"
            parameterMap=""
            resultType="employeer"
            resultMap=""
            flushCache=""
            useCache=""
            timeout=""
            fetchSize=""
            statementType=""
            resultSetType=""
            resultOrdered=""
            resultSets=""
            databaseId=""
    >
        select * from `t_employeer`
        wheidr_id eidr_id}
    </select>-->

</mapper>
